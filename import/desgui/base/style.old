/+
The MIT License (MIT)

    Copyright (c) <2013> <Oleg Butko (deviator), Anton Akzhigitov (Akzwar)>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
+/

//module desgui.base.style;
//
//public import desgui.base.stylestate;
//
//import std.string;
//import std.json;
//
//class DiStyle
//{
//    DiStyleStateList sl;
//
//    DiStyle[string] sub;
//
//    void append( in DiStyle r )
//    {
//        foreach( n, v; r.sl.state )
//        {
//            if( n in sl.state )
//                sl.state[n].append( v );
//            else
//                sl.state[n] = DiStyleState( v );
//
//            sl.global.append( r.sl.global );
//        }
//
//        foreach( n, v; r.sub )
//        {
//            if( n in sub )
//                sub[n].append( v );
//            else
//                sub[n] = new DiStyle( v );
//        }
//    }
//
//    void append( JSONValue init, string elemSymbols="$@#" )
//    {
//        if( init.type != JSON_TYPE.OBJECT )
//            throw new Exception( "json value for style must be a object" );
//
//        if( elemSymbols.length != 3 )
//            throw new Exception( "elemSymbol string must have 3 char" );
//
//        foreach( i; 0 .. elemSymbols.length - 1 )
//            foreach( j; i+1 .. elemSymbols.length )
//                if( elemSymbols[i] == elemSymbols[j] )
//                    throw new Exception( "elemSymbols string '" ~ elemSymbols ~ 
//                            "' have equals chars: '" ~ elemSymbols[i] ~ "'" );
//
//        foreach( tname, obj; init.object )
//        {
//            if( tname[0] == elemSymbols[0] )
//            {
//                auto name = tname[ 1 .. $ ];
//                sl.global.set( name, obj );
//            }
//            else
//            if( tname[0] == elemSymbols[1] ) // State parse
//            {
//                auto name = tname[ 1 .. $ ];
//                if( name in sl.state )
//                    sl.state[ name ].append( obj );
//                else
//                    sl.state[ name ] = DiStyleState( obj );
//            }
//            else
//            if( tname[0] == elemSymbols[2] )
//            {
//                auto names = tname[1 .. $].split(".");
//                DiStyle last = this;
//                foreach( name; names )
//                {
//                    auto p = name in last.sub;
//                    if( p is null )
//                        last.sub[name] = new DiStyle;
//                    last = last.sub[name];
//                }
//                last.append( obj );
//            }
//        }
//    }
//
//    this( JSONValue init, string es="$@#" ) { append( init, es ); }
//    this( in DiStyle init ) { append( init ); }
//
//    pure this() {}
//
//    DiStyleStateList getFullState( string fullname )
//    {
//        DiStyleStateList ret;
//
//        foreach( k, v; sl.state )
//            ret.state[k] = DiStyleState( v );
//
//        ret.global.append( sl.global );
//
//        auto names = fullname.split(".");
//
//        if( names.length && names[0] in sub )
//        {
//            string sname = "";
//            if( names.length > 1 )
//                sname = names[1 .. $].join(".");
//            auto sfs = (sub[names[0]]).getFullState( sname );
//            foreach( k, v; sfs.state )
//            {
//                if( k in ret.state )
//                    ret.state[k].append( v );
//                else
//                    ret.state[k] = DiStyleState( v );
//            }
//
//            ret.global.append( sfs.global );
//        }
//
//        return ret;
//    }
//}
//
//enum string defaultStyle = `
//{
//    "#panel" :
//    {
//        "$substrate_corner_size" : 5,
//        "$font" : "#F"
//    },
//
//    "#panel.button" :
//    {
//        "$fill" : "#F3",
//        "$anim_speed": 3.0,
//
//        "@active" :
//        {
//            "fill" : "#2AFE",
//            "font" : "#0F",
//            "anim_speed" : 12.0
//        },
//
//        "@select" :
//        {
//            "fill" : "#AA2E",
//            "font" : "#0F",
//            "anim_speed" : 100.0
//        },
//
//        "@press" :
//        {
//            "fill" : "#F0EA20FD",
//            "anim_speed" : 250.0
//        },
//
//        "@click" :
//        {
//            "fill" : "#2AFE"
//        }
//    }
//}`;
//
//unittest
//{
//    auto defStyle = new DiStyle( parseJSON( defaultStyle ) );
//    auto btnStyle = defStyle.getFullState( "panel.button" );
//    assert( "substrate_corner_size" in btnStyle["default"].integer );
//    assert( btnStyle[""].integer["substrate_corner_size"] == 5 );
//}
//
//unittest
//{
//    import std.stdio;
//    auto s = new DiStyle( parseJSON( ` 
//            {
//                "$fill" : "#FFFFFF",
//                "$cont" : "#000000",
//                "$font" : "#FF0000",
//
//                "@active" :
//                {
//                    "fill" : "#FF0000"
//                },
//
//                "#widget" :
//                {
//                    "$fill" : "#000000",
//
//                    "@active" :
//                    {
//                        "fill" : "#A",
//                        "cont" : "#00FF00"
//                    },
//
//                    "@xstate" :
//                    {
//                        "fill" : "#B",
//                        "cont" : "#C",
//                        "font" : "#D",
//                        "head" : "#f"
//                    },
//
//                    "#label" :
//                    {
//                        "$font" : "#0000FF",
//                        "$body" : "#0FF0FF"
//                    }
//                },
//
//                "#widget.button" :
//                {
//                    "@xstate" :
//                    {
//                        "head" : "#0F0F0F"
//                    },
//
//                    "@pressed" :
//                    {
//                        "fill" : "#00FFFF",
//                        "cont" : "#0000FF"
//                    }
//                }
//            }
//    ` ) );
//
//    import desmath.types.vector;
//
//    DiStyleState tgs;
//    tgs.color["fill"] = col4(1,1,1,1);
//    tgs.color["cont"] = col4(0,0,0,1);
//    tgs.color["font"] = col4(1,0,0,1);
//    assert( s.sl.global == tgs );
//    assert( s.sl.state.keys == [ "active" ] );
//    assert( s.sub.keys == [ "widget" ] );
//
//    auto swidget = s.sub["widget"];
//    assert( swidget.sub.keys.sort == [ "button", "label" ].sort );
//
//    assert( swidget.sl.global.color.keys == ["fill"] );
//    assert( swidget.sl.state.keys.sort == [ "active", "xstate" ].sort );
//
//    assert( s.getFullState( "" ) == s.getFullState( "button" ) );
//
//    auto wbfs = s.getFullState( "widget.button" );
//    assert( wbfs.global.color.keys.sort == ["fill","cont","font"].sort );
//    assert( wbfs.state.keys.sort == [ "pressed", "xstate", "active" ].sort );
//
//    auto wfs = s.getFullState( "widget" );
//    assert( wfs.global.color.keys.sort == ["fill","cont","font"].sort );
//    assert( wfs.state.keys.sort == [ "xstate", "active" ].sort );
//
//    auto wlfs = s.getFullState( "widget.label" );
//    assert( wlfs.global.color.keys.sort == ["fill","cont","font","body"].sort );
//    assert( wlfs.state.keys.sort == [ "xstate", "active" ].sort );
//
//
//    bool colorCompare( in col4 a, in col4 b )
//    {
//        import std.math;
//        float s = 0;
//        foreach( i; 0 .. 4 )
//            s += abs( a[i] - b[i] );
//        return s < float.epsilon * 16;
//    }
//
//    import desmath.funcs.colorparse;
//
//    auto awlfs = wlfs[ "active" ];
//    assert( awlfs.color.keys.length == 4 );
//    assert( colorCompare( awlfs.color["fill"], parseColorStr( "#A" ) ) );
//    assert( colorCompare( awlfs.color["cont"], parseColorStr( "#00FF00" ) ) );
//    assert( colorCompare( awlfs.color["font"], parseColorStr( "#0000FF" ) ) );
//    assert( colorCompare( awlfs.color["body"], parseColorStr( "#0FF0FF" ) ) );
//
//    auto xwlfs = wlfs[ "xstate" ];
//    assert( xwlfs.color.keys.length == 5 );
//    assert( colorCompare( xwlfs.color["fill"], parseColorStr( "#B" ) ) );
//    assert( colorCompare( xwlfs.color["cont"], parseColorStr( "#C" ) ) );
//    assert( colorCompare( xwlfs.color["font"], parseColorStr( "#D" ) ) );
//    assert( colorCompare( xwlfs.color["body"], parseColorStr( "#0FF0FF" ) ) );
//    assert( colorCompare( xwlfs.color["head"], parseColorStr( "#F" ) ) );
//
//    auto awbfs = wbfs[ "active" ];
//    assert( awbfs.color.keys.length == 3 );
//    assert( colorCompare( awbfs.color["fill"], parseColorStr( "#A" ) ) );
//    assert( colorCompare( awbfs.color["cont"], parseColorStr( "#00FF00" ) ) );
//    assert( colorCompare( awbfs.color["font"], parseColorStr( "#FF0000" ) ) );
//
//    auto xwbfs = wbfs[ "xstate" ];
//    assert( xwbfs.color.keys.length == 4 );
//    assert( colorCompare( xwbfs.color["fill"], parseColorStr( "#B" ) ) );
//    assert( colorCompare( xwbfs.color["cont"], parseColorStr( "#C" ) ) );
//    assert( colorCompare( xwbfs.color["font"], parseColorStr( "#D" ) ) );
//    assert( colorCompare( xwbfs.color["head"], parseColorStr( "#0F0F0F" ) ) );
//
//    auto pwbfs = wbfs[ "pressed" ];
//    assert( pwbfs.color.keys.length == 3 );
//    assert( colorCompare( pwbfs.color["fill"], parseColorStr( "#00FFFF" ) ) );
//    assert( colorCompare( pwbfs.color["cont"], parseColorStr( "#0000FF" ) ) );
//    assert( colorCompare( pwbfs.color["font"], parseColorStr( "#FF0000" ) ) );
//
//    auto es = new DiStyle;
//    auto esgfs = es.getFullState( "w.b.l" );
//    DiStyleState empty_state;
//    assert( empty_state == esgfs[ "act" ] );
//    empty_state.color["fill"] = parseColorStr( "#F" );
//    assert( empty_state != esgfs[ "act" ] );
//}
